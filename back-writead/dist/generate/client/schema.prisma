generator client {
  provider      = "prisma-client-js"
  output        = "../src/generate/client/"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

generator client_dist {
  provider      = "prisma-client-js"
  output        = "../dist/generate/client/"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categoria {
  id_categoria Int        @id @default(autoincrement())
  descripcion  String?    @db.VarChar(100)
  genero       genero[]
  pl_libre     pl_libre[]
  pl_nl        pl_nl[]
}

model etiqueta {
  id_etiqueta Int        @id @default(autoincrement())
  nombre      String?    @db.VarChar(50)
  pl_libre    pl_libre[]
}

model genero {
  id_genero    Int        @id @default(autoincrement())
  id_categoria Int?
  nombre       String?    @db.VarChar(60)
  categoria    categoria? @relation(fields: [id_categoria], references: [id_categoria], onDelete: Restrict, onUpdate: Restrict, map: "genero_ibfk_1")
  pl_nl        pl_nl[]

  @@index([id_categoria], map: "id_categoria")
}

model persona {
  id_persona       Int       @id @default(autoincrement())
  nombre           String?   @db.VarChar(50)
  apellido_paterno String?   @db.VarChar(20)
  apellido_materno String?   @db.VarChar(20)
  usuario          usuario[]
}

model usuario {
  id_usuario                                Int       @id @default(autoincrement())
  id_persona                                Int?
  correo                                    String?   @db.VarChar(30)
  contrasenia                               String?   @db.VarChar(255)
  verificacion_email                        Boolean?
  id_estado                                 Int?
  autor                                     autor[]
  seguido_seguido_id_user_seguidorTousuario seguido[] @relation("seguido_id_user_seguidorTousuario")
  seguido_seguido_id_user_seguidoTousuario  seguido[] @relation("seguido_id_user_seguidoTousuario")
  persona                                   persona?  @relation(fields: [id_persona], references: [id_persona], onDelete: Restrict, onUpdate: Restrict, map: "usuario_ibfk_1")

  @@index([id_persona], map: "id_persona")
}

model autor {
  id_autor     Int          @id @default(autoincrement())
  id_pais      Int?
  id_usuario   Int?
  nick_name    String?      @db.VarChar(50)
  ocupacion    String?      @db.VarChar(100)
  descripcion  String?      @db.Text
  foto_perfil  String?      @db.VarChar(100)
  foto_portada String?      @db.VarChar(100)
  actividad    actividad[]
  usuario      usuario?     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Restrict, onUpdate: Restrict, map: "autor_ibfk_1")
  pais         pais?        @relation(fields: [id_pais], references: [id_pais], onDelete: Restrict, onUpdate: Restrict, map: "autor_ibfk_2")
  comentario   comentario[]
  pl_libre     pl_libre[]
  pl_nl        pl_nl[]
  reaccion     reaccion[]

  @@index([id_pais], map: "id_pais")
  @@index([id_usuario], map: "id_usuario")
}

model pais {
  id_pais Int     @id @default(autoincrement())
  nombre  String? @db.VarChar(80)
  code    String? @db.VarChar(4)
  autor   autor[]
}

model seguido {
  id_seguido                                Int               @id @default(autoincrement())
  id_user_seguidor                          Int?
  id_user_seguido                           Int?
  id_seguimiento                            Int?
  fecha_seguimiento                         DateTime?         @db.DateTime(0)
  usuario_seguido_id_user_seguidorTousuario usuario?          @relation("seguido_id_user_seguidorTousuario", fields: [id_user_seguidor], references: [id_usuario], onDelete: Restrict, onUpdate: Restrict, map: "seguido_ibfk_1")
  usuario_seguido_id_user_seguidoTousuario  usuario?          @relation("seguido_id_user_seguidoTousuario", fields: [id_user_seguido], references: [id_usuario], onDelete: Restrict, onUpdate: Restrict, map: "seguido_ibfk_2")
  tipo_seguimiento                          tipo_seguimiento? @relation(fields: [id_seguimiento], references: [id_seguimiento], onDelete: Restrict, onUpdate: Restrict, map: "seguido_ibfk_3")

  @@index([id_seguimiento], map: "id_seguimiento")
  @@index([id_user_seguido], map: "id_user_seguido")
  @@index([id_user_seguidor], map: "id_user_seguidor")
}

model tipo_seguimiento {
  id_seguimiento Int       @id @default(autoincrement())
  descripcion    String?   @db.VarChar(15)
  seguido        seguido[]
}

model reaccion {
  id_reaccion  Int        @id @default(autoincrement())
  id_autor     Int?
  id_editorial Int?
  estado       Int?
  autor        autor?     @relation(fields: [id_autor], references: [id_autor], onDelete: Restrict, onUpdate: Restrict, map: "reaccion_ibfk_1")
  editorial    editorial? @relation(fields: [id_editorial], references: [id_editorial_pl], onDelete: Restrict, onUpdate: Restrict, map: "reaccion_ibfk_2")

  @@index([id_editorial], map: "id_editorial")
  @@index([id_autor], map: "id_autor")
}

model cap_pl_ln {
  id_cap_pl       Int        @id @default(autoincrement())
  id_editorial_pl Int?
  id_pl_ln        Int?
  nro_capitulo    String?    @db.VarChar(100)
  nombre_capitulo String?    @db.VarChar(200)
  contenido       String?    @db.Text
  pl_nl           pl_nl?     @relation(fields: [id_pl_ln], references: [id_pl_ln], onDelete: Restrict, onUpdate: Restrict, map: "cap_pl_ln_ibfk_1")
  editorial       editorial? @relation(fields: [id_editorial_pl], references: [id_editorial_pl], onDelete: Restrict, onUpdate: Restrict, map: "cap_pl_ln_ibfk_2")

  @@index([id_editorial_pl], map: "id_editorial_pl")
  @@index([id_pl_ln], map: "id_pl_ln")
}

model editorial {
  id_editorial_pl Int          @id @default(autoincrement())
  fecha_registro  DateTime?    @db.DateTime(0)
  id_estado       Int
  cap_pl_ln       cap_pl_ln[]
  comentario      comentario[]
  pl_libre        pl_libre[]
  reaccion        reaccion[]
}

model pl_libre {
  id_pl_libre     Int        @id @default(autoincrement())
  id_categoria    Int?
  id_editorial_pl Int?
  id_etiqueta     Int?
  contenido       String?    @db.Text
  id_autor        Int?
  categoria       categoria? @relation(fields: [id_categoria], references: [id_categoria], onDelete: Restrict, onUpdate: Restrict, map: "pl_libre_ibfk_1")
  editorial       editorial? @relation(fields: [id_editorial_pl], references: [id_editorial_pl], onDelete: Restrict, onUpdate: Restrict, map: "pl_libre_ibfk_2")
  etiqueta        etiqueta?  @relation(fields: [id_etiqueta], references: [id_etiqueta], onDelete: Restrict, onUpdate: Restrict, map: "pl_libre_ibfk_3")
  autor           autor?     @relation(fields: [id_autor], references: [id_autor], onDelete: Restrict, onUpdate: Restrict, map: "pl_libre_ibfk_4")

  @@index([id_categoria], map: "id_categoria")
  @@index([id_editorial_pl], map: "id_editorial_pl")
  @@index([id_etiqueta], map: "id_etiqueta")
  @@index([id_autor], map: "id_autor")
}

model pl_nl {
  id_pl_ln     Int         @id @default(autoincrement())
  titulo       String?     @db.VarChar(200)
  id_genero    Int?
  id_categoria Int?
  descripcion  String?     @db.Text
  estado       String      @db.VarChar(50)
  id_autor     Int?
  cap_pl_ln    cap_pl_ln[]
  genero       genero?     @relation(fields: [id_genero], references: [id_genero], onDelete: Restrict, onUpdate: Restrict, map: "pl_nl_ibfk_1")
  categoria    categoria?  @relation(fields: [id_categoria], references: [id_categoria], onDelete: Restrict, onUpdate: Restrict, map: "pl_nl_ibfk_2")
  autor        autor?      @relation(fields: [id_autor], references: [id_autor], onDelete: Restrict, onUpdate: Restrict, map: "pl_nl_ibfk_3")

  @@index([id_categoria], map: "id_categoria")
  @@index([id_genero], map: "id_genero")
  @@index([id_autor], map: "id_autor")
}

model comentario {
  id_comentario  Int        @id @default(autoincrement())
  id_autor       Int?
  id_editorial   Int?
  fecha_registro DateTime?  @db.DateTime(0)
  contenido      String?    @db.Text
  id_estado      Int?
  autor          autor?     @relation(fields: [id_autor], references: [id_autor], onDelete: Restrict, onUpdate: Restrict, map: "comentario_ibfk_1")
  editorial      editorial? @relation(fields: [id_editorial], references: [id_editorial_pl], onDelete: Restrict, onUpdate: Restrict, map: "comentario_ibfk_2")

  @@index([id_autor], map: "id_autor")
  @@index([id_editorial], map: "id_editorial")
}

model actividad {
  id_actividad     Int       @id @default(autoincrement())
  id_autor         Int?
  tipo_actividad   String?   @db.VarChar(50)
  fecha_registrada DateTime? @db.DateTime(0)
  autor            autor?    @relation(fields: [id_autor], references: [id_autor], onDelete: Restrict, onUpdate: Restrict, map: "actividad_ibfk_1")

  @@index([id_autor], map: "id_autor")
}
